library(shiny); runApp('Test_1.R')
library(nlmr)
library(shiny); runApp('Test_shiny.R')
# +, -, *, /, ^2
generate_random_function <- function (predictors) {
operands = c("+", "-", "*", "/")
expression = ""
for (i in 1:(nlayers(predictors)-1)){
expression <- paste(expression, paste("predictors$", names(predictors)[i], sep=""), sep = " ")
expression <- paste(expression, sample(operands, 1), sep = " ")
}
expression <- paste(expression, paste("predictors$", names(predictors)[nlayers(predictors)], sep=""), sep = " ")
print(expression)
outcome <- raster()
outcome <- expression[1]
return(outcome)
}
runApp('Test_shiny.R')
runApp('Test_shiny.R')
expression = ""
for (i in 1:(nlayers(predictors)-1)){
expression <- expression(paste(expression, paste("predictors$", names(predictors)[i], sep="")), sep = " ")
expression <- expression(paste(expression, sample(operands, 1), sep = " "))
}
################################################################################
# b)
#?nlm_distancegradient
# simulate a distance gradient
distance_gradient <- nlm_distancegradient(ncol = 100, nrow = 100,
origin = c(80, 10, 40, 5))
################################################################################
# c)
# simulate random curdling
edge_gradient <- nlm_edgegradient(ncol = 100, nrow = 100, direction = 30)
predictors <- stack(distance_gradient, edge_gradient)
operands = c("+", "-", "*", "/")
expression = ""
for (i in 1:(nlayers(predictors)-1)){
expression <- expression(paste(expression, paste("predictors$", names(predictors)[i], sep="")), sep = " ")
expression <- expression(paste(expression, sample(operands, 1), sep = " "))
}
expression <- expression(paste(expression, paste("predictors$", names(predictors)[nlayers(predictors)], sep=""), sep = " "))
outcome <- raster()
print(expression)
?expression
predictors <- stack(distance_gradient, edge_gradient)
# +, -, *, /, ^2
generate_random_function <- function (predictors) {
operands = c("+", "-", "*", "/")
expression = ""
for (i in 1:(nlayers(predictors)-1)){
expression <- paste(expression, paste("predictors$", names(predictors)[i], sep=""), sep = " ")
expression <- paste(expression, sample(operands, 1), sep = " ")
}
expression <- paste(expression, paste("predictors$", names(predictors)[nlayers(predictors)], sep="", sep = " "))
outcome <- as.expression(expression)
print(expression)
# outcome <- expression[1]
return(outcome)
}
operands = c("+", "-", "*", "/")
expression = ""
for (i in 1:(nlayers(predictors)-1)){
expression <- paste(expression, paste("predictors$", names(predictors)[i], sep=""), sep = " ")
expression <- paste(expression, sample(operands, 1), sep = " ")
}
expression <- paste(expression, paste("predictors$", names(predictors)[nlayers(predictors)], sep="", sep = " "))
operands = c("+", "-", "*", "/")
expression = ""
for (i in 1:(nlayers(predictors)-1)){
expression <- paste(expression, paste("predictors$", names(predictors)[i], sep=""), sep = " ")
expression <- paste(expression, sample(operands, 1), sep = " ")
}
expression <- paste(expression, paste("predictors$", names(predictors)[nlayers(predictors)], sep=""), sep = " ")
outcome <- as.expression(expression)
outcome
print(expression)
outcome <- as.expression(expression)
outcome
outcome <- as.expression(as.name(expression[1]))
outcome
outcome <- as.expression(noquote(expression))
outcome
operands = c("+", "-", "*", "/")
expression = ""
for (i in 1:(nlayers(predictors)-1)){
expression <- paste(expression, paste("predictors$", names(predictors)[i], sep=""), sep = " ")
expression <- paste(expression, sample(operands, 1), sep = " ")
}
expression <- paste(expression, paste("predictors$", names(predictors)[nlayers(predictors)], sep=""), sep = " ")
expression
print(expression)
outcome <- as.expression(noquote(expression))
outcome
runApp('Test_shiny.R')
runApp('Test_shiny.R')
runApp('Test_shiny.R')
runApp('Test_shiny.R')
runApp('Test_shiny.R')
?eval
runApp('Test_shiny.R')
runApp('Test_shiny.R')
runApp('Test_shiny.R')
runApp('Test_shiny.R')
runApp('Test_shiny.R')
runApp('Test_shiny.R')
library(shiny); runApp('Test_shiny.R')
runApp('Test_shiny.R')
runApp('Test_shiny.R')
library(shiny); runApp('Test_shiny.R')
runApp('Test_shiny.R')
library(shiny); runApp('Test_shiny.R')
library(shiny); runApp('C:/Users/thali/Documents/GitHub/remote-sensing-modeling-tool/test_22.R')
runApp('Test_shiny.R')
library(shiny); runApp('Test_shiny.R')
runApp('Test_shiny.R')
runApp('Test_shiny.R')
runApp('Test_shiny.R')
runApp('Test_shiny.R')
runApp('Test_shiny.R')
runApp('Test_shiny.R')
?nrows
?nrow()
runApp('Test_shiny.R')
runApp('Test_shiny.R')
?switch
library(shiny); runApp('Test_shiny.R')
?switch
runApp('Test_shiny.R')
runApp('Test_shiny.R')
